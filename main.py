import os
import asyncio
import docker
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Docker –∫–ª–∏–µ–Ω—Ç
docker_client = docker.from_env()

MAX_LOG_MESSAGE_LEN = 4000  # –∑–∞–ø–∞—Å –ø–æ–¥ –ª–∏–º–∏—Ç Telegram


# ---------- Docker helpers ----------

def get_containers():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–∏–º—è, —Å—Ç–∞—Ç—É—Å)."""
    containers = docker_client.containers.list(all=True)
    return [(c.name, c.status) for c in containers]


def stop_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.stop()
    return f"üõë –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


def start_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.start()
    return f"‚ñ∂Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –∑–∞–ø—É—â–µ–Ω"


def restart_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.restart()
    return f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"


def get_logs(name: str, tail: int = 100, offset: int = 0) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    tail ‚Äî —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤–∑—è—Ç—å –∑–∞ —Ä–∞–∑, offset ‚Äî —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω–µ–µ.
    """
    container = docker_client.containers.get(name)
    all_logs = container.logs().decode(errors="ignore").splitlines()

    if offset >= len(all_logs):
        return [f"üìú –õ–æ–≥–∏ {name}:\n(–±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫)"]

    start_index = max(len(all_logs) - offset - tail, 0)
    selected_logs = all_logs[start_index : len(all_logs) - offset]
    logs = "\n".join(selected_logs)

    header = (
        f"üìú –õ–æ–≥–∏ {name} "
        f"(—Å—Ç—Ä–æ–∫–∏ {len(all_logs) - len(selected_logs) - offset}‚Äì{len(all_logs) - offset} –∏–∑ {len(all_logs)}):\n\n"
    )

    parts = []
    current = ""
    for line in logs.splitlines():
        if len(current) + len(line) + 1 > MAX_LOG_MESSAGE_LEN:
            parts.append(current)
            current = ""
        current += line + "\n"
    if current:
        parts.append(current)

    if parts:
        parts[0] = header + parts[0]
    else:
        parts = [header + "(–ø—É—Å—Ç–æ)"]

    return parts


# ---------- Telegram Handlers ----------

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start."""
    if message.from_user.id != ALLOWED_USER_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await show_containers(message)


async def show_containers(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    containers = get_containers()
    if not containers:
        return await message.answer("‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

    kb = InlineKeyboardBuilder()
    for name, status in containers:
        kb.button(text=f"{name} ({status})", callback_data=f"select:{name}")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
    kb.adjust(1)

    try:
        await message.edit_text("üì¶ –í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:", reply_markup=kb.as_markup())
    except Exception:
        await message.answer("üì¶ –í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:", reply_markup=kb.as_markup())


@dp.callback_query(lambda c: c.data == "refresh")
async def refresh_list(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    await show_containers(callback.message)


@dp.callback_query(lambda c: c.data.startswith("select:"))
async def container_selected(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    name = callback.data.split(":", 1)[1]

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action:start:{name}")
    kb.button(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action:stop:{name}")
    kb.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action:restart:{name}")
    kb.button(text="üìú –õ–æ–≥–∏", callback_data=f"action:logs:{name}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh")
    kb.adjust(2)

    try:
        await callback.message.edit_text(
            f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º <b>{name}</b>?",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await callback.message.answer(
            f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º <b>{name}</b>?",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("action:"))
async def container_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º."""
    _, action, name = callback.data.split(":", 2)
    try:
        if action == "start":
            result = start_container(name)
            parse_mode = None
        elif action == "stop":
            result = stop_container(name)
            parse_mode = None
        elif action == "restart":
            result = restart_container(name)
            parse_mode = None
        elif action == "logs":
            log_parts = get_logs(name, tail=100, offset=0)
            for part in log_parts:
                await callback.message.answer(f"```\n{part}\n```", parse_mode="Markdown")

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            kb = InlineKeyboardBuilder()
            kb.button(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"logs_more:{name}:100")
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh")
            kb.adjust(1)
            await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.as_markup())

            await callback.answer()
            return  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ –ª–æ–≥–æ–≤
        else:
            result = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            parse_mode = None
    except Exception as e:
        result = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
        parse_mode = None

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.edit_text(result, parse_mode=parse_mode)
    except Exception:
        await callback.message.answer(result, parse_mode=parse_mode)

    await callback.answer()
    await show_containers(callback.message)


@dp.callback_query(lambda c: c.data.startswith("logs_more:"))
async def logs_more(callback: types.CallbackQuery):
    """–î–æ–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)."""
    _, name, offset_str = callback.data.split(":")
    offset = int(offset_str)

    log_parts = get_logs(name, tail=100, offset=offset)
    for part in log_parts:
        await callback.message.answer(f"```\n{part}\n```", parse_mode="Markdown")

    new_offset = offset + 100
    kb = InlineKeyboardBuilder()
    kb.button(text="üìú –ï—â—ë +100 —Å—Ç—Ä–æ–∫", callback_data=f"logs_more:{name}:{new_offset}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh")
    kb.adjust(1)
    await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.as_markup())

    await callback.answer()


# ---------- Main ----------

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
