import os
import asyncio
import docker
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Docker –∫–ª–∏–µ–Ω—Ç
docker_client = docker.from_env()


def get_containers():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–∏–º—è, —Å—Ç–∞—Ç—É—Å)."""
    containers = docker_client.containers.list(all=True)
    return [(c.name, c.status) for c in containers]


def stop_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.stop()
    return f"üõë –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


def start_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.start()
    return f"‚ñ∂Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –∑–∞–ø—É—â–µ–Ω"


def restart_container(name: str) -> str:
    container = docker_client.containers.get(name)
    container.restart()
    return f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"


def get_logs(name: str, tail: int = 35) -> str:
    container = docker_client.containers.get(name)
    logs = container.logs(tail=tail).decode(errors="ignore")
    return f"üìú –õ–æ–≥–∏ {name}:\n```\n{logs}\n```"


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ALLOWED_USER_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await show_containers(message)


async def show_containers(message: types.Message):
    containers = get_containers()
    if not containers:
        return await message.answer("‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

    kb = InlineKeyboardBuilder()
    for name, status in containers:
        kb.button(text=f"{name} ({status})", callback_data=f"select:{name}")
    kb.adjust(1)
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:", reply_markup=kb.as_markup())


@dp.callback_query(lambda c: c.data.startswith("select:"))
async def container_selected(callback: types.CallbackQuery):
    name = callback.data.split(":", 1)[1]

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action:start:{name}")
    kb.button(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action:stop:{name}")
    kb.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action:restart:{name}")
    kb.button(text="üìú –õ–æ–≥–∏", callback_data=f"action:logs:{name}")
    kb.adjust(2)

    await callback.message.answer(
        f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º <b>{name}</b>?",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("action:"))
async def container_action(callback: types.CallbackQuery):
    _, action, name = callback.data.split(":", 2)
    try:
        if action == "start":
            result = start_container(name)
            parse_mode = None
        elif action == "stop":
            result = stop_container(name)
            parse_mode = None
        elif action == "restart":
            result = restart_container(name)
            parse_mode = None
        elif action == "logs":
            result = get_logs(name)
            parse_mode = "Markdown"
        else:
            result = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            parse_mode = None
    except Exception as e:
        result = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
        parse_mode = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
    await callback.message.answer(result, parse_mode=parse_mode)
    await callback.answer()

    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    await show_containers(callback.message)



async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
